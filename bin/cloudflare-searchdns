#!/bin/bash
# search dns entries in a zone for the given criteria

NAME="$(basename $0)"
OPTS=`getopt -n $NAME -o hu:t:T: --long help,url:,token:,type: -- "$@"`
if [ "$?" != 0 ]; then echo "Failed to parse options"; exit 1; fi

CLOUDFLARE_URL_DEFAULT="https://api.cloudflare.com/client/v4"
CLOUDFLARE_URL="$CLOUDFLARE_URL_DEFAULT"
TYPE=
ACTION=run
while true; do
	case "$1" in
		-h| --help) ACTION=help; shift;;
		-u| --url) CLOUDFLARE_URL="$2"; shift 2;;
		-t| --token) CLOUDFLARE_TOKEN="$2"; shift 2;;
		-T| --type) SEARCH_TYPE="$2"; shift 2;;
		--) shift; break;;
		*) break;;
	esac
done
ZONE="$1"
SEARCH="$2"

ct_help() {
	cat <<-END
	$NAME zone search: search zone for a dns entry
	
	-h|--help        : this help
	-u|--url URL     : cloudflare api url (defaults to \$CLOUDFLARE_URL or $CLOUDFLARE_URL_DEFAULT)
	-t|--token TOKEN : cloudflare token   (defaults to \$CLOUDFLARE_TOKEN)
	-T|--type TYPE   : filter dns entry by type (defaults to all entries)
	END
}

# process args
if [ "$ACTION" = "help" ]; then
	ct_help
	exit
fi

if [ -z "$CLOUDFLARE_TOKEN" ]; then
	echo "Cloudflare token not provided. Please pass -t or set the \$CLOUDFLARE_TOKEN variable"
	exit 1
fi

if [ -z "$ZONE" ]; then
	echo "Zone not provided."
	exit 1
fi

if [ -z "$SEARCH" ]; then
	echo "Search term not provided."
	exit 1
fi

# initial processing
SEARCHZONES_OPTS="--url $CLOUDFLARE_URL --token $CLOUDFLARE_TOKEN"
ZONE_ID="$(cloudflare-searchzones $SEARCHZONES_OPTS $ZONE | jq -r '.[0].id')"
if [ "$ZONE_ID" = "null" ]; then
	echo "Unable to find zone $ZONE"
	exit 2
fi

FILTER='.name == "'"$SEARCH"'"'
if [ "$SEARCH_TYPE" ]; then
	FILTER="$FILTER and .type == \"$SEARCH_TYPE\""
fi

## run
GETDNS_OPTS="--url $CLOUDFLARE_URL --token $CLOUDFLARE_TOKEN"
cloudflare-getdns $GETDNS_OPTS "$ZONE" | jq '[ .[]|{id: .id, type: .type, name: .name, content: .content, proxied: .proxied, ttl: .ttl, priority: .priority}|select('"$FILTER"') ]'
